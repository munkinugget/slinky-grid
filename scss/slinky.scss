/*
syntax?

col
  required base class

[break]-[columns] (ex. xs-12)
  indicates a fixed base size

gte-[break]-[columns] (ex. gte-xs-12)
  indicates that this element should be larger then or equal to
  the specified number of columns

lte-[break]-[columns] (ex. lte-xs-12)
  indicates that this element should be smaller then or equal to
  the specified number of columns

*/

$grid-debug-mode: true;
$grid-columns: 12 !default;
$grid-columns-relative: 16 !default;

$grid-gutter-width: 30px !default;
$outer-margin: $grid-gutter-width / 2 !default;

// Extra small screen / phone
$screen-xs-min: 480px !default;

// Small screen / tablet
$screen-sm-min: 768px !default;

// Medium screen / desktop
$screen-md-min: 992px !default;

// Large screen / wide desktop
$screen-lg-min: 1200px !default;

$syntax-container: 'container';
$syntax-container-fluid: 'container-fluid';
$syntax-row:    'row';
$syntax-col:    'col';
$syntax-offset: 'offset';
$syntax-gte:    'gte';
$syntax-lte:    'lte';

body {
  padding: 0;
  margin: 0;
}

.#{$syntax-container-fluid}, .#{$syntax-container} {
  margin-right: auto;
  margin-left: auto;
}

.#{$syntax-container-fluid} {
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.#{$syntax-row} {
  box-sizing: border-box;
  display: flex;

  flex-direction: row;
  flex-wrap: wrap;

  margin-left:  floor(($grid-gutter-width / -2));
  margin-right: ceil(($grid-gutter-width / -2));

  @if $grid-debug-mode {
    position: relative;

    &:before{
      position: absolute;
      display: block;
      content: '';

      top: 0;
      left: 0;
      bottom: 0;

      width: floor(($grid-gutter-width / 2));
      background-color: rgba(255, 0, 0, .2);
    }

    &:after{
      position: absolute;
      display: block;
      content: '';

      top: 0;
      right: 0;
      bottom: 0;

      width: ceil(($grid-gutter-width / 2));
      background-color: rgba(255, 0, 0, .2);
    }
  }
}

.#{$syntax-col} {
  box-sizing: border-box;

  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: auto;

  padding-left:  floor(($grid-gutter-width / 2));
  padding-right: ceil(($grid-gutter-width / 2));

  @if $grid-debug-mode {
    min-height: 3em;
    margin-bottom: 1em;
    &:before{
      position: relative;
      display: block;
      content: '';
      
      width: 100%;
      height: 100%;
      min-height: 3em;
      margin-bottom: 1em;

      background-color: rgba(0, 0, 0, .2);
    }
  }
}

@mixin base-col($breakpoint) {
  @for $i from 1 through $grid-columns {
    .#{$breakpoint}-#{$i} {
      flex-basis: $i / $grid-columns * 100%;
    }

    .#{$breakpoint}-#{$syntax-offset}-#{$i} {
      margin-left: $i / $grid-columns * 100%;
    }
  }
}

@mixin col-modifiers($breakpoint) {
  .#{$syntax-col} {
    &.grow-#{$breakpoint}{
      flex-grow: 1;
      flex-shrink: 0;
    }

    &.shrink-#{$breakpoint}{
      flex-grow: 0;
      flex-shrink: 1;
    }

    &.first-#{$breakpoint} {
      order: -1;
    }

    &.last-#{$breakpoint} {
      order: 1;
    }
  }
}

@mixin row-modifiers($breakpoint) {
  .#{$syntax-row} {
    .start-#{$breakpoint}{
      justify-content: flex-start;
      text-align: start;
    }

    .center-#{$breakpoint} {
      justify-content: center;
      text-align: center;
    }

    .end-#{$breakpoint} {
      justify-content: flex-end;
      text-align: end;
    }

    .top-#{$breakpoint} {
      align-items: flex-start;
    }

    .middle-#{$breakpoint} {
      align-items: center;
    }

    .bottom-#{$breakpoint} {
      align-items: flex-end;
    }

    .around-#{$breakpoint} {
      justify-content: space-around;
    }

    .between-#{$breakpoint} {
      justify-content: space-between;
    }

    .reverse-#{$breakpoint} {
      flex-direction: row-reverse;
    }

    .column-#{$breakpoint} {
      flex-direction: column;
    }

    .column-reverse-#{$breakpoint} {
      flex-direction: column-reverse;
    }
  }
}

@mixin gte-col($breakpoint) {
  @for $i from 1 through $grid-columns {
    .#{$breakpoint}-#{$syntax-gte}-#{$i} {
      flex-grow: 1;
      min-width: $i / $grid-columns * 100%;
    }
  }
}

@mixin lte-col($breakpoint) {
  @for $i from 1 through $grid-columns {
    .#{$breakpoint}-#{$syntax-lte}-#{$i} {
      flex-shrink: 1;
      max-width: $i / $grid-columns * 100%;
    }
  }
}

@include base-col(xs);
@include gte-col(xs);
@include lte-col(xs);
@include col-modifiers(xs);
@include row-modifiers(xs);

@media (min-width: $screen-sm-min) {
  @include base-col(sm);
  @include gte-col(sm);
  @include lte-col(sm);
  @include col-modifiers(sm);
  @include row-modifiers(sm);
}

@media (min-width: $screen-md-min) {
  @include base-col(md);
  @include gte-col(md);
  @include lte-col(md);
  @include col-modifiers(md);
  @include row-modifiers(md);
}

@media (min-width: $screen-lg-min) {
  @include base-col(lg);
  @include gte-col(lg);
  @include lte-col(lg);
  @include col-modifiers(lg);
  @include row-modifiers(lg);
}
