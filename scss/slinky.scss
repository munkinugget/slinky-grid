/*
syntax?

col
  required base class

[break]-[columns] (ex. xs-12)
  indicates a fixed base size

gte-[break]-[columns] (ex. gte-xs-12)
  indicates that this element should be larger then or equal to
  the specified number of columns

lte-[break]-[columns] (ex. lte-xs-12)
  indicates that this element should be smaller then or equal to
  the specified number of columns

*/

$grid-debug: true;
$grid-columns: 12 !default;
$grid-columns-relative: 16 !default;

$grid-gutter-width: 30px !default;
$outer-margin: $grid-gutter-width / 2 !default;

// Extra small screen / phone
$screen-xs-min: 480px !default;

// Small screen / tablet
$screen-sm-min: 768px !default;

// Medium screen / desktop
$screen-md-min: 992px !default;

// Large screen / wide desktop
$screen-lg-min: 1200px !default;

$syntax-container: 'container';
$syntax-container-fluid: 'container-fluid';
$syntax-row: 'row';
$syntax-col: 'col';
$syntax-gte: 'gte';
$syntax-lte: 'lte';

body {
  padding: 0;
  margin: 0;
}

.box {
  width: 100%;
  height: 20px;
  background-color: #333333;
}

.grid {
  position: absolute;
  width: 100%;
  margin-bottom: 1em;
  .box {
    width: 100%;
    height: calc(100vh - 40px);
    background-color: rgba(0, 0, 0, .2);
  }
}

.#{$syntax-container-fluid}, .#{$syntax-container} {
  margin-right: auto;
  margin-left: auto;
}

.#{$syntax-container-fluid} {
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.#{$syntax-row} {
  box-sizing: border-box;
  display: flex;

  flex-direction: row;
  flex-wrap: wrap;

  margin-right: -$grid-gutter-width / 2;
  margin-left: -$grid-gutter-width / 2;
}

.#{$syntax-col} {
  box-sizing: border-box;

  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: auto;

  padding-right: $grid-gutter-width / 2;
  padding-left: $grid-gutter-width / 2;
}

@mixin base-col($breakpoint) {
  @for $i from 1 through $grid-columns {
    .#{$breakpoint}-#{$i} {
      flex-basis: $i / $grid-columns * 100%;
    }
  }

  .grow-#{$prefix}{
    flex-grow: 1;
    flex-shrink: 0;
  }

  .shrink-#{$prefix}{
    flex-grow: 0;
    flex-shrink: 1;
  }

  .start-#{$prefix}{
    justify-content: flex-start;
    text-align: start;
  }

  .center-#{$prefix} {
    justify-content: center;
    text-align: center;
  }

  .end-#{$prefix} {
    justify-content: flex-end;
    text-align: end;
  }

  .top-#{$prefix} {
    align-items: flex-start;
  }

  .middle-#{$prefix} {
    align-items: center;
  }

  .bottom-#{$prefix} {
    align-items: flex-end;
  }

  .around-#{$prefix} {
    justify-content: space-around;
  }

  .between-#{$prefix} {
    justify-content: space-between;
  }

  .first-#{$prefix} {
    order: -1;
  }

  .last-#{$prefix} {
    order: 1;
  }
}

@mixin gte-col($breakpoint) {
  @for $i from 1 through $grid-columns {
    .#{$breakpoint}-#{$syntax-gte}-#{$i} {
      flex-grow: 1;
      min-width: $i / $grid-columns * 100%;
    }
  }
}

@mixin lte-col($breakpoint) {
  @for $i from 1 through $grid-columns {
    .#{$breakpoint}-#{$syntax-lte}-#{$i} {
      flex-shrink: 1;
      max-width: $i / $grid-columns * 100%;
    }
  }
}

@include base-col(xs);
@include gte-col(xs);
@include lte-col(xs);

@media (min-width: $screen-sm-min) {
  @include base-col(sm);
  @include gte-col(sm);
  @include lte-col(sm);
}

@media (min-width: $screen-md-min) {
  @include base-col(md);
  @include gte-col(md);
  @include lte-col(md);
}

@media (min-width: $screen-lg-min) {
  @include base-col(lg);
  @include gte-col(lg);
  @include lte-col(lg);
}

/* @include gte-col(xs);

@media (min-width: $screen-sm-min) {
  @include gte-col(sm);
}

@media (min-width: $screen-md-min) {
  @include gte-col(md);
}

@media (min-width: $screen-lg-min) {
  @include gte-col(lg);
}

@include lte-col(xs);

@media (min-width: $screen-sm-min) {
  @include lte-col(sm);
}

@media (min-width: $screen-md-min) {
  @include lte-col(md);
}

@media (min-width: $screen-lg-min) {
  @include lte-col(lg);
} */
